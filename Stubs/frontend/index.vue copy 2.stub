<script setup lang="ts">
import { {{ modelName }}API } from '../../api/{{ modelName }}'
import type { I{{ modelName }} } from '../../types/models'
import { useI18n } from 'vue-i18n'

import ModelAddOrEdit from '../../components/{{ moduleName }}{{ modelName }}AddOrEdit.vue';
import ModelDetail from '../../components/{{ moduleName }}{{ modelName }}Detail.vue';
const { confirmDialog } = useConfirm()

const items = ref<I{{ modelName }}[]>([]);
const loading = ref(true);
const dialog = ref(false);
const selectedItem = ref<I{{ modelName }} | null>(null);
const selectedItems = ref<number[]>([])

const { t } = useI18n()

const getData = async () => {
  loading.value = true
  try {
    items.value = await {{ modelName }}API.getAll()
  }
  catch (error) {
    console.error(error)
  }
  finally {
    loading.value = false
  }
}

onMounted(async () => {
  await getData()
});

const openDialog = (item?: I{{ modelName }}) => {
  selectedItem.value = item || null;
  dialog.value = true;
};

const deleteItem = async (id: number) => {
  if (await confirmDialog({
    title: t("message.delete.title"),
    message: t("message.delete.message"),
    persistent: true,
  })) {
    loading.value = true
    try {
      await {{ modelName }}API.delete(id)
      await getData()
    }
    catch (error) {
      console.error(error)
    }
    finally {
      loading.value = false
    }
  }
};

const deleteManyItems = async (ids: number[]) => {
  if (await confirmDialog({
    title: t('message.delete.title'),
    message: t('message.delete.message'),
    persistent: true,
  })) {
    loading.value = true
    try {
      await {{ modelName }}API.deleteMultiple(ids)
      await getData()
    }
    catch (error) {
      console.error(error)
    }
    finally {
      loading.value = false
    }
  }
}

const refreshList = async () => {
  dialog.value = false;
  await getData()
};

const { toCamelCase } = useCamelCase()
const model = '{{ modelName }}'.toLowerCase()

const headers = [
  {{ headers }}
  { title: '', key: 'actions', sortable: false },
].map(e => {
  if (e.title === '' || e.title === 'Actions')
    return e
  e.title = t(`${model}.${toCamelCase(e.title)}`)
  return e
})

const searchKey = ref('')

</script>

<template>
  <VCard class="main-content">
    <VCardTitle class="d-flex justify-space-between align-center">
      <h2>{{ modelName }}</h2>
      <VRow class="ma-1">
        <CoreTextField
          id="id"
          v-model="searchKey"
          name="name"
          margin="m-2"
          placeholder="Rechercher"
          size="6"
          class="ma-auto"
          append-inner-icon="bx-search "
        />
      </VRow>
      <div class="action">
        <VBtn
          class="me-4"
          color="success"
          variant="outlined"
          @click="openDialog"
        >
          {{ t('action.add') }}
        </VBtn>
        <VBtn
          class="ms-2"
          color="error"
          variant="outlined"
          @click="openDialog"
          v-if="selectedItems.length"

        >
          {{ t('action.delete') }}
        </VBtn>
      </div>
    </VCardTitle>
    <VCardText>
      <VDataTable
        v-model="selectedItems"
        :headers="headers"
        :items="items"
        :loading="loading"
        :disabled="loading"
        item-value="id"
        :search="searchKey"
        show-select
        fixed-header
        :height="windowHeight"
      >
          <template #loading>
          <VSkeletonLoader type="table-row@10" />
        </template>
        <template v-slot:item.actions="{ item }">
        <div class="action">
          <VBtn
            icon
            color="primary"
            variant="text"
            @click="openDialog(item)"
          >
            <VIcon
              color="primary"
              icon="bx-edit-alt"
              center
            />
          </VBtn>
          <VBtn
            icon
            color="error"
            variant="text"
            @click="deleteItem(item.id)"
          >
            <VIcon
              icon="bx-trash-alt"
              center
            />
          </VBtn>
          </div>
        </template>
      </VDataTable>
    </VCardText>
  </VCard>

  <!-- Dialog d'ajout / modification -->
  <AddOrEdit v-model="dialog" :item="selectedItem" @saved="refreshList" />
</template>

