<script setup lang="ts">
import { can } from '@/@layouts/plugins/casl'
import { {{ modelName }}API } from '../../api/{{ modelName }}'
import type { I{{ modelName }} } from '../../types/entities'

import {{ moduleName }}{{ modelName }}AddOrEdit from '../../components/{{ moduleName }}{{ modelName }}AddOrEdit.vue'

const { confirmDialog } = useConfirm()
const { t } = useI18n({ useScope: 'global' })

// définition de la page et des permissions nécessaires
definePage({
  meta: {
    action: 'access',
    subject: '{{ permissionsSubject }}',
  },
})

const items = ref<I{{ modelName }}[]>([])
const loading = ref(true)
const editDialog = ref(false)
const detailDialog = ref(false)
const selectedItem = ref<I{{ modelName }} | null>(null)
const selectedItems = ref<number[]>([])
const readOnly = ref<boolean>(false)
const { tHeaderCols } = useTranslater()

const getData = async () => {
  loading.value = true
  try {
    items.value = await {{ modelName }}API.getAll()
  } catch (error) {
    console.error(error)
  } finally {
    loading.value = false
  }
}

onMounted(async () => {
  await getData()
})

// pour désactiver me mode edition
watch(
  () => editDialog.value,
  (newVal, oldVal) => {
    if (newVal)
      console.log('Entré en mode édition ✅')

    else
      readOnly.value = false
  },
)

const openEditDialog = (item?: I{{ modelName }}) => {
  selectedItem.value = item || null
  editDialog.value = true
}

const openDetailDialog = (item?: I{{ modelName }}) => {
  selectedItem.value = item || null
  editDialog.value = true
  readOnly.value = true
}

const deleteItem = async (id: number) => {
  if (await confirmDialog()) {
    loading.value = true
    try {
      await {{ modelName }}API.delete(id)
      await getData()
    } catch (error) {
      console.error(error)
    } finally {
      loading.value = false
    }
  }
}

const deleteManyItems = async (ids: number[]) => {
  if (await confirmDialog()) {
    loading.value = true
    try {
      await {{ modelName }}API.deleteMultiple(ids)
      await getData()
    } catch (error) {
      console.error(error)
    } finally {
      loading.value = false
    }
  }
}

const refreshList = async () => {
  editDialog.value = false
  detailDialog.value = false
  await getData()
}

const { toCamelCase } = useCamelCase()

const entity = toCamelCase('{{ modelName }}')


const headers = tHeaderCols ({ 
  entity,
  module: '{{ moduleName }}',
  headers: [
    {{ headers }}
    { title: 'actions', key: 'actions', sortable: false, translate: false },
  ]
})

const searchKey = ref('')
</script>

<template>
  <VCard>
    <VCardTitle class="d-flex justify-space-between align-center">
      <h2>{{ t(`{{ moduleName }}.${entity}.titlePlural`) }}</h2>
      <div class="flex-grow-1">
        <CoreTextField
          v-model="searchKey"
          :placeholder="t('action.search')"
          class="mx-auto pa-0"
          append-inner-icon="bx-search"
        />
      </div>
      <div class="action">
        <VBtn
          v-if="$can('browse', '{{ permissionsSubject }}')"
          class="ms-1"
          color="secondary"
          :title="t('action.refresh')"
          icon="bx-refresh"
          @click="refreshList"
        />
        <VBtn
          v-if="$can('add', '{{ permissionsSubject }}')"
          class="ms-1"
          color="success"
          :title="t('action.add')"
          icon="bx-plus"
          @click="openEditDialog"
        />
        <VBtn
          v-if="selectedItems.length"
          class="ms-1"
          color="error"
          :title="t('action.delete')"
          icon="bx-trash"
          @click="deleteManyItems"
        />
      </div>
    </VCardTitle>
    <VCardText>
      <VDataTable
        v-model="selectedItems"
        :entity="entity"
        :disabled="loading"
        :loading="loading"
        :headers="headers"
        :items="items"
        :search="searchKey"
      >
        <template #top />

        {{ customDisplayColumn }}

        <template #item.actions="{ item }">
          <div class="d-flex flex-nowrap align-center justify-end px-1">
            <VBtn
              color="info"
              variant="text"
              icon="bx-show-alt"
              density="compact"
              title="Details"
              @click="openDetailDialog(item)"
            />
            <VMenu
              v-if="can('edit', '{{ permissionsSubject }}') || can('delete', '{{ permissionsSubject }}')"
              open-on-hover
            >
              <template #activator="{ props }">
                <VBtn
                  icon="mdi-dots-vertical"
                  variant="outlined"
                  v-bind="props"
                  density="compact"
                  title="Actions"
                />
              </template>
              <VList>
                <VListItem
                  v-if="$can('edit', '{{ permissionsSubject }}')"
                  prepend-icon="bx-edit-alt"
                  :title="t('action.edit')"
                  @click="openEditDialog(item)"
                />
                <VListItem
                  v-if="$can('delete', '{{ permissionsSubject }}')"
                  prepend-icon="bx-trash-alt"
                  :title="t('action.delete')"
                  @click="deleteItem(item.id)"
                />
              </VList>
            </VMenu>
          </div>
        </template>
      </VDataTable>
    </VCardText>
  </VCard>


 <{{ moduleName }}{{ modelName }}AddOrEdit v-model="editDialog"  :readonly="readOnly" :item="selectedItem" @saved="refreshList" />
</template>
